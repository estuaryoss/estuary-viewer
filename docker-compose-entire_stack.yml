version: "3.3"
services:
  selenium-hub:
    image: selenium/hub:3.141.59
    container_name: selenium-hub
    ports:
      - "4444:4444"
  chrome:
    image: selenium/node-chrome:3.141.59
    volumes:
      - /dev/shm:/dev/shm
    depends_on:
      - selenium-hub
    environment:
      - DBUS_SESSION_BUS_ADDRESS=/dev/null
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
  firefox:
    image: selenium/node-firefox:3.141.59
    volumes:
      - /dev/shm:/dev/shm
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444

  estuary-agent:
    image: estuaryoss/agent-go:latest
    hostname: estuary-agent
    #    entrypoint: tail -f /etc/alpine-release
    command: bash -c "sleep 45 && ./estuary-agent-go"
    environment:
      limit: 'sky' #example env var inserted. you can read it with environ('limit') in your jinja2 template
      EUREKA_SERVER: http://eureka-server:8080/eureka/v2 #your eureka server
      APP_IP_PORT: estuary-agent:8080 #your app details: where it is and on which port. needed for service discovery and spread of tests from the test client
      HTTP_AUTH_TOKEN: "None"
    expose:
      - "8080"

  estuary-discovery:
    image: estuaryoss/discovery:latest
    hostname: estuary-discovery
    command: bash -c "sleep 45 && /root/app/main-linux"
    environment:
      limit: 'sky' #example env var inserted. you can read it with environ('limit') in your jinja2 template
      EUREKA_SERVER: http://eureka-server:8080/eureka/v2 #your eureka server
      APP_IP_PORT: estuary-discovery:8080 #your app details: where it is and on which port. needed for service discovery and spread of tests from the test client
#    ports:
#      - "8091:8080"
    expose:
      - "8080"

  estuary-deployer:
    image: estuaryoss/deployer:latest
    hostname: estuary-deployer
    #    entrypoint: tail -f /etc/alpine-release
    environment:
      limit: 'sky' # example env var inserted. you can read it with environ('limit')
      MAX_DEPLOYMENTS: 3 # how many deployments to be done. Useful for VMs where user knows how much resources a docker-compose env use.
      MAX_DEPLOY_MEMORY: 80 # % from total. tune this parameter after you measure how much a docker compose env consumes. E.g. 16 GB memory => docker will still compose new env if less than ~13.)
      #for eureka registering
      EUREKA_SERVER: http://eureka-server:8080/eureka/v2 #your eureka server
      #      APP_APPEND_ID: SR # this suffix will be added to the deployer service in order to differentiate between different services mapped on VM with specific resources
      APP_IP_PORT: estuary-deployer:8080 #your app details: where it is and on which port. needed for service discovery and spread of tests from the test client
    #    entrypoint: /scripts/main_flask.py
    command: bash -c "sleep 45 && /root/deployer/main-linux"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # works on win also as long as you don't enable tcp daemon on 2375/2376
    expose:
      - "8080"

  eureka-server:
    image: estuaryoss/netflix-eureka:1.10.5
    hostname: eureka-server
#    ports:
#      - "8080:8080"
    expose:
      - "8080"

  estuary-viewer:
    image: estuaryoss/viewer:latest
    hostname: estuary-viewer
    container_name: estuary-viewer
    environment:
      ESTUARY_DISCOVERY: http://estuary-discovery:8080
      HTTP_AUTH_TOKEN: None
#    ports:
#      - "8091:8080"
    expose:
      - "8080"
